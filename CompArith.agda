module CompArith where

open import Data.Empty
open import Data.Bool
open import Data.Product using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat
open ‚â§-Reasoning
  renaming (begin_ to start_; _‚àé to _‚ñ°; _‚â°‚ü®_‚ü©_ to _‚â°‚ü®_‚ü©'_)
open import Data.Nat.Properties
open import Data.Nat.Properties.Simple

open import Data.Integer as Int using (‚Ñ§; +_; sign; _‚äñ_) renaming (_*_ to _‚Ñ§*_; _+_ to _‚Ñ§+_; _-_ to _‚Ñ§-_; _‚â§_ to _‚Ñ§‚â§_)

open import Algebra
import Data.Integer.Properties as IntegerProp
private
  module CR‚Ñ§ = CommutativeRing IntegerProp.commutativeRing


-- open Int.‚â§-Reasoning
--   renaming (begin_ to start_; _‚àé to _‚ñ°; _‚â°‚ü®_‚ü©_ to _‚â°‚ü®_‚ü©'_)

open import Data.Vec
open import Data.Sign using (Sign)
open import Relation.Binary.PropositionalEquality as PropEq
  using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ)
open PropEq.‚â°-Reasoning
open import Relation.Nullary using (¬¨_; Dec; yes; no)

-_ : ‚Ñï -> ‚Ñ§
- x = Int.- (+ x)

ùîπ = Bool

_^_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m ^ zero = 1
m ^ suc x = m * (m ^ x)

‚à•_‚à• : ùîπ -> ‚Ñï
‚à• false ‚à• = 0
‚à• true ‚à• = 1

compl : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> Vec ùîπ (‚Ñï.suc k)
compl {zero} (x ‚à∑ []) = not x ‚à∑ []
compl {suc k} (x ‚à∑ xs) = not x ‚à∑ compl xs

Œ£ : ‚àÄ {k} -> Vec ùîπ k -> ‚Ñï
Œ£ {zero} [] = 0
Œ£ {suc i} (false ‚à∑ xs) = Œ£ xs
Œ£ {suc i} (true ‚à∑ xs) = (2 ^ i) + Œ£ xs

Œ£spec : ‚àÄ {k} -> Vec ùîπ k -> ‚Ñï
Œ£spec {zero} [] = 0
Œ£spec {suc i} (x ‚à∑ xs) = ‚à• x ‚à• * 2 ^ i + Œ£ xs

+-zer-id : ‚àÄ n -> n + 0 ‚â° n
+-zer-id zero = refl
+-zer-id (suc n) = cong suc (+-zer-id n)

*-1-id : ‚àÄ n -> 1 * n ‚â° n
*-1-id zero = refl
*-1-id (suc n) = cong suc (*-1-id n)


-- Œ£ is a better def. to work with ... similar to the def. of ‚ü™_‚ü´
Œ£spec‚â°Œ£ : ‚àÄ {k} (x : Vec ùîπ k) -> Œ£spec x ‚â° Œ£ x
Œ£spec‚â°Œ£ [] = refl
Œ£spec‚â°Œ£ (false ‚à∑ xs) = refl
Œ£spec‚â°Œ£ {suc i} (true ‚à∑ xs) rewrite *-1-id (2 ^ i) = refl

‚ü¶_‚üß : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> ‚Ñ§
‚ü¶ xs ‚üß = + Œ£ xs

‚ü™_‚ü´ : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> ‚Ñ§
‚ü™_‚ü´ {k} (false ‚à∑ xs) = + Œ£ xs
‚ü™_‚ü´ {k} (true ‚à∑ xs) = - (2 ^ k) ‚Ñ§+ (+ Œ£ xs)


œÉ : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> Sign
œÉ (false ‚à∑ xs) = Sign.+
œÉ (true ‚à∑ xs) = Sign.-

Top : ‚àÄ {k} -> Vec ùîπ k
Top {zero} = []
Top {suc k} = true ‚à∑ Top

‚â§-steps2 : ‚àÄ {m n} k ‚Üí m ‚â§ n ‚Üí k + m ‚â§ k + n
‚â§-steps2 zero m‚â§n = m‚â§n
‚â§-steps2 (suc k) m‚â§n = s‚â§s (‚â§-steps2 k m‚â§n)

‚â§-Top : ‚àÄ {k} {x : Vec ùîπ k} -> Œ£ x ‚â§ Œ£ (Top {k})
‚â§-Top {zero} {[]} = z‚â§n
‚â§-Top {suc k} {false ‚à∑ xs} = ‚â§-steps {Œ£ xs} {Œ£ {k} Top} (2 ^ k) (‚â§-Top {k})
‚â§-Top {suc k} {true ‚à∑ xs} = ‚â§-steps2 (2 ^ k) (‚â§-Top {k})

‚â§-*-steps : ‚àÄ {m n} k ‚Üí 1 ‚â§ k -> m ‚â§ n ‚Üí m ‚â§ k * n
‚â§-*-steps zero () _
‚â§-*-steps {n = n} (suc zero) 1‚â§k m‚â§n rewrite *-1-id n = m‚â§n
‚â§-*-steps {n = n} (suc (suc k)) 1‚â§k m‚â§n = ‚â§-steps n (‚â§-*-steps (suc k) (s‚â§s z‚â§n) m‚â§n)

1‚â§2^k : ‚àÄ {k} -> 1 ‚â§ (2 ^ k)
1‚â§2^k {zero} = s‚â§s z‚â§n
1‚â§2^k {suc k} = start
  1 ‚â§‚ü® 1‚â§2^k {k} ‚ü©
  2 ^ k ‚â§‚ü® ‚â§-*-steps {n = 2 ^ k} 2 (s‚â§s z‚â§n) (‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl) ‚ü©
  2 ^ (suc k) ‚ñ°

lem1-1-1 : ‚àÄ {k} -> Œ£ (Top {k}) ‚â° (2 ^ k) ‚à∏ 1 -- equiv to ‚ü¶ Top {k} ‚üß ‚â° (2 ^ k) ‚à∏ 1
lem1-1-1 {zero} = refl
lem1-1-1 {suc k} rewrite lem1-1-1 {k} | +-right-identity (2 ^ k) = begin
  (2 ^ k) + ((2 ^ k) ‚à∏ 1) ‚â°‚ü® sym (+-‚à∏-assoc (2 ^ k) {2 ^ k} {1} (1‚â§2^k {k})) ‚ü© refl


‚äñ-‚Ñ§- : ‚àÄ m n ‚Üí m ‚äñ n ‚â° + m ‚Ñ§- + n
‚äñ-‚Ñ§- zero zero = refl
‚äñ-‚Ñ§- zero (suc n) = refl
‚äñ-‚Ñ§- (suc m) zero rewrite +-zer-id m | +-zer-id m = refl
‚äñ-‚Ñ§- (suc m) (suc n) = refl

‚äñ-‚â• : ‚àÄ {m n} ‚Üí m ‚â• n ‚Üí m ‚äñ n ‚â° + (m ‚à∏ n)
‚äñ-‚â• z‚â§n       = refl
‚äñ-‚â• (s‚â§s n‚â§m) = ‚äñ-‚â• n‚â§m

‚äñ-< : ‚àÄ {m n} ‚Üí m < n ‚Üí m ‚äñ n ‚â° - (n ‚à∏ m)
‚äñ-< {zero}  (s‚â§s z‚â§n) = refl
‚äñ-< {suc m} (s‚â§s m<n) = ‚äñ-< m<n

¬¨‚â§-> : ‚àÄ {m n} -> ¬¨ (m ‚â§ n) -> m > n
¬¨‚â§-> {0} {n} ¬¨m‚â§n = ‚ä•-elim (¬¨m‚â§n z‚â§n)
¬¨‚â§-> {suc m} {0} ¬¨m‚â§n = s‚â§s z‚â§n
¬¨‚â§-> {suc m} {suc n} ¬¨m‚â§n = s‚â§s (¬¨‚â§-> (Œª z ‚Üí ¬¨m‚â§n (s‚â§s z)))

>-¬¨‚â§ : ‚àÄ {m n} -> m > n -> ¬¨ (m ‚â§ n)
>-¬¨‚â§ (s‚â§s z‚â§n) ()
>-¬¨‚â§ (s‚â§s (s‚â§s m>n)) (s‚â§s m‚â§n) = >-¬¨‚â§ m‚â§n m>n

-‚àÉ : ‚àÄ {k n} -> k > n -> ‚àÉ(Œª m -> - (k ‚à∏ n) ‚â° Int.-[1+ m ] √ó k ‚à∏ n ‚â° suc m)
-‚àÉ {0} k>n = ‚ä•-elim (>-¬¨‚â§ k>n z‚â§n)
-‚àÉ {suc k} {0} k>n = k , refl , refl
-‚àÉ {suc k} {suc n} (s‚â§s k>n) = m , left , right
  where
  ih : ‚àÉ(Œª m ‚Üí - (k ‚à∏ n) ‚â° Int.-[1+ m ] √ó k ‚à∏ n ‚â° suc m)
  ih = -‚àÉ k>n

  m = proj‚ÇÅ ih
  left = proj‚ÇÅ (proj‚ÇÇ ih)
  right = proj‚ÇÇ (proj‚ÇÇ ih)


‚Ñ§‚â§-refl : ‚àÄ {m n} ‚Üí m ‚â° n ‚Üí m ‚Ñ§‚â§ n
‚Ñ§‚â§-refl {+ m}          {+ .m}          refl = Int.+‚â§+ (‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl)
‚Ñ§‚â§-refl {+ m}          {Int.-[1+ n ]}  ()
‚Ñ§‚â§-refl {Int.-[1+ m ]} {+ n}           ()
‚Ñ§‚â§-refl {Int.-[1+ m ]} {Int.-[1+ .m ]} refl = Int.-‚â§- (‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl)

‚â§-refl : ‚àÄ {m n} ‚Üí m ‚â° n ‚Üí m ‚â§ n
‚â§-refl refl = ‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl


m‚â§n‚áím-k‚â§n-k : ‚àÄ {m n} k -> m ‚â§ n -> m ‚à∏ k ‚â§ n ‚à∏ k
m‚â§n‚áím-k‚â§n-k 0 m‚â§n = m‚â§n
m‚â§n‚áím-k‚â§n-k {0} (suc k) m‚â§n = z‚â§n
m‚â§n‚áím-k‚â§n-k {suc m} {0} (suc k) ()
m‚â§n‚áím-k‚â§n-k {suc m} {suc n} (suc k) (s‚â§s m‚â§n) = m‚â§n‚áím-k‚â§n-k k m‚â§n


n‚â§m‚áík-m‚â§k-n : ‚àÄ m n k -> n ‚â§ m -> k ‚à∏ m ‚â§ k ‚à∏ n
n‚â§m‚áík-m‚â§k-n 0 n 0 _ = z‚â§n
n‚â§m‚áík-m‚â§k-n (suc m) n 0 _ = z‚â§n
n‚â§m‚áík-m‚â§k-n 0 0 (suc k) n‚â§m = s‚â§s (n‚â§m‚áík-m‚â§k-n 0 0 k n‚â§m)
n‚â§m‚áík-m‚â§k-n zero (suc n) (suc k) ()
n‚â§m‚áík-m‚â§k-n (suc m) 0 (suc k) z‚â§n = start
  k ‚à∏ m ‚â§‚ü® n‚â§m‚áík-m‚â§k-n m 0 k z‚â§n ‚ü© k ‚â§‚ü® ‚â§‚Ä≤‚áí‚â§ (‚â§‚Ä≤-step ‚â§‚Ä≤-refl) ‚ü© suc k ‚ñ°
n‚â§m‚áík-m‚â§k-n (suc m) (suc n) (suc k) (s‚â§s n‚â§m) = n‚â§m‚áík-m‚â§k-n m n k n‚â§m

sx‚â§sy‚áíx‚â§y : ‚àÄ {x y} -> suc x ‚â§ suc y -> x ‚â§ y
sx‚â§sy‚áíx‚â§y (s‚â§s x‚â§y) = x‚â§y

k-m‚â§k : ‚àÄ k m -> k ‚à∏ m ‚â§ k
k-m‚â§k 0 0 = z‚â§n
k-m‚â§k 0 (suc m) = z‚â§n
k-m‚â§k (suc k) 0 = s‚â§s (k-m‚â§k k zero)
k-m‚â§k (suc k) (suc m) = start k ‚à∏ m ‚â§‚ü® k-m‚â§k k m ‚ü© k ‚â§‚ü® ‚â§‚Ä≤‚áí‚â§ (‚â§‚Ä≤-step ‚â§‚Ä≤-refl) ‚ü© suc k ‚ñ°


‚Ñ§‚â§-steps : ‚àÄ {m n} k ‚Üí m ‚Ñ§‚â§ n ‚Üí k ‚Ñ§+ m ‚Ñ§‚â§ k ‚Ñ§+ n
‚Ñ§‚â§-steps {+ m}          {+ n}          (+ k)                (Int.+‚â§+ m‚â§n) = Int.+‚â§+ (‚â§-steps2 k m‚â§n)
‚Ñ§‚â§-steps {+ 0}          {+ 0}          (Int.-[1+ k ])       (Int.+‚â§+ m‚â§n) = ‚Ñ§‚â§-refl refl
‚Ñ§‚â§-steps {+ 0}          {+ suc n}      (Int.-[1+ 0 ])       (Int.+‚â§+ m‚â§n) = Int.-‚â§+
‚Ñ§‚â§-steps {+ 0}          {+ suc n}      (Int.-[1+ suc k ])   (Int.+‚â§+ m‚â§n) with suc k ‚â§? n
‚Ñ§‚â§-steps {+ 0}          {+ suc _}      (Int.-[1+ suc k ])   (Int.+‚â§+ m‚â§n) | yes (s‚â§s {_} {n} k‚â§n)
  rewrite ‚äñ-‚â• {n} {k} k‚â§n = Int.-‚â§+
‚Ñ§‚â§-steps {+ 0}          {+ suc n}      (Int.-[1+ suc k ])   (Int.+‚â§+ m‚â§n) | no sk>n
  rewrite ‚äñ-< {n} {suc k} (¬¨‚â§-> sk>n) = body
  where
  ‚àÉm = -‚àÉ (¬¨‚â§-> sk>n)
  m = proj‚ÇÅ ‚àÉm
  m‚â°- = proj‚ÇÅ (proj‚ÇÇ ‚àÉm)
  m‚â° = proj‚ÇÇ (proj‚ÇÇ ‚àÉm)

  aux‚ÇÅ : ‚àÄ {k n} -> k ‚à∏ n ‚â§ k
  aux‚ÇÅ {n = 0} = ‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl
  aux‚ÇÅ {0} {suc n} = z‚â§n
  aux‚ÇÅ {suc k} {suc n} = start
    suc k ‚à∏ suc n ‚â§‚ü® aux‚ÇÅ {k} {n} ‚ü© k ‚â§‚ü® ‚â§‚Ä≤‚áí‚â§ (‚â§‚Ä≤-step ‚â§‚Ä≤-refl) ‚ü© suc k ‚ñ°

  aux : m ‚â§ suc k
  aux = start
    m ‚â§‚ü® ‚â§‚Ä≤‚áí‚â§ (‚â§‚Ä≤-step ‚â§‚Ä≤-refl) ‚ü© suc m ‚â§‚ü® ‚â§-refl (sym m‚â°) ‚ü© suc k ‚à∏ n ‚â§‚ü® aux‚ÇÅ {suc k} {n} ‚ü© suc k ‚ñ°

  body : Int.-[1+ suc k ] ‚Ñ§‚â§ - (suc k ‚à∏ n)
  body rewrite m‚â°- = Int.-‚â§- aux

‚Ñ§‚â§-steps {+ suc m}      {+ 0}          (Int.-[1+ k ])     (Int.+‚â§+ ())
‚Ñ§‚â§-steps {+ suc m}      {+ suc n}      (Int.-[1+ 0 ])     (Int.+‚â§+ (s‚â§s m‚â§n)) = Int.+‚â§+ m‚â§n
‚Ñ§‚â§-steps {+ suc m}      {+ suc n}      (Int.-[1+ suc k ]) (Int.+‚â§+ m‚â§n) with suc k ‚â§? m | suc k ‚â§? n
‚Ñ§‚â§-steps {+ suc _}      {+ suc _}      (Int.-[1+ suc k ]) (Int.+‚â§+ (s‚â§s (s‚â§s m‚â§n))) | yes (s‚â§s {_} {m} k‚â§m) | yes (s‚â§s {_} {n} k‚â§n)
  rewrite ‚äñ-‚â• {m} {k} k‚â§m | ‚äñ-‚â• {n} {k} k‚â§n = Int.+‚â§+ (m‚â§n‚áím-k‚â§n-k k m‚â§n)
‚Ñ§‚â§-steps {+ suc _}      {+ suc n}      (Int.-[1+ suc k ]) (Int.+‚â§+ (s‚â§s m‚â§n)) | yes (s‚â§s {_} {m} k‚â§m) | no ¬¨sk‚â§n =
  ‚ä•-elim (¬¨sk‚â§n (start
    suc k ‚â§‚ü® s‚â§s k‚â§m ‚ü© suc m ‚â§‚ü® m‚â§n ‚ü© n ‚ñ°))
‚Ñ§‚â§-steps {+ suc m}      {+ suc _}      (Int.-[1+ suc k ]) (Int.+‚â§+ (s‚â§s m‚â§sn)) | no ¬¨sk‚â§m | yes (s‚â§s {_} {n} k‚â§n)
  rewrite ‚äñ-< {m} {suc k} (¬¨‚â§-> ¬¨sk‚â§m) | ‚äñ-‚â• {n} {k} k‚â§n | proj‚ÇÅ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sk‚â§m))) = Int.-‚â§+
‚Ñ§‚â§-steps {+ suc m}      {+ suc n}      (Int.-[1+ suc k ]) (Int.+‚â§+ (s‚â§s m‚â§n)) | no ¬¨sk‚â§m | no ¬¨sk‚â§n
  rewrite ‚äñ-< {m} {suc k} (¬¨‚â§-> ¬¨sk‚â§m) | ‚äñ-< {n} {suc k} (¬¨‚â§-> ¬¨sk‚â§n) = body
  where
  ‚àÉm = -‚àÉ (¬¨‚â§-> ¬¨sk‚â§m)
  m'‚â°- = proj‚ÇÅ (proj‚ÇÇ ‚àÉm)
  m'‚â° = proj‚ÇÇ (proj‚ÇÇ ‚àÉm)
  ‚àÉn = -‚àÉ (¬¨‚â§-> ¬¨sk‚â§n)
  n'‚â°- = proj‚ÇÅ (proj‚ÇÇ ‚àÉn)
  n'‚â° = proj‚ÇÇ (proj‚ÇÇ ‚àÉn)

  aux : suc (proj‚ÇÅ ‚àÉn) ‚â§ suc (proj‚ÇÅ ‚àÉm)
  aux rewrite (sym m'‚â°) | (sym n'‚â°) = n‚â§m‚áík-m‚â§k-n n m (suc k) m‚â§n

  body : - (suc k ‚à∏ m) ‚Ñ§‚â§ - (suc k ‚à∏ n)
  body rewrite m'‚â°- | n'‚â°- = Int.-‚â§- (sx‚â§sy‚áíx‚â§y aux)

‚Ñ§‚â§-steps {+ m}          {Int.-[1+ n ]} k ()
‚Ñ§‚â§-steps {Int.-[1+ m ]} {+ n}          (+ k)              Int.-‚â§+ with suc m ‚â§? k
‚Ñ§‚â§-steps {Int.-[1+ m ]} {+ n}          (+ _)              Int.-‚â§+ | yes (s‚â§s {_} {k} m‚â§k)
  rewrite ‚äñ-‚â• {k} {m} m‚â§k = Int.+‚â§+ (start
    k ‚à∏ m ‚â§‚ü® k-m‚â§k k m ‚ü© k ‚â§‚ü® ‚â§‚Ä≤‚áí‚â§ (‚â§‚Ä≤-step ‚â§‚Ä≤-refl) ‚ü© suc k ‚â§‚ü® m‚â§m+n (suc k) n ‚ü© suc k + n ‚ñ°)
‚Ñ§‚â§-steps {Int.-[1+ m ]} {+ n}          (+ k)              Int.-‚â§+ | no ¬¨sm‚â§k
  rewrite ‚äñ-< {k} {suc m} (¬¨‚â§-> ¬¨sm‚â§k) | proj‚ÇÅ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sm‚â§k))) = Int.-‚â§+
‚Ñ§‚â§-steps {Int.-[1+ m ]} {+ n}          (Int.-[1+ k ])     Int.-‚â§+ with suc k ‚â§? n
‚Ñ§‚â§-steps {Int.-[1+ m ]} {+ _}          (Int.-[1+ k ])     Int.-‚â§+ | yes (s‚â§s {_} {n} k‚â§n)
  rewrite ‚äñ-‚â• {n} {k} k‚â§n = Int.-‚â§+
‚Ñ§‚â§-steps {Int.-[1+_] m} {+_ n} (Int.-[1+_] k) Int.-‚â§+ | no ¬¨sk‚â§n
  rewrite ‚äñ-< {n} {suc k} (¬¨‚â§-> ¬¨sk‚â§n) | proj‚ÇÅ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sk‚â§n))) = Int.-‚â§- (sx‚â§sy‚áíx‚â§y aux)
  where
  aux : suc (proj‚ÇÅ (-‚àÉ (¬¨‚â§-> ¬¨sk‚â§n))) ‚â§ suc (suc k) + m
  aux rewrite sym (proj‚ÇÇ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sk‚â§n)))) = start
    suc k ‚à∏ n ‚â§‚ü® k-m‚â§k (suc k) n ‚ü©
    suc k ‚â§‚ü® ‚â§‚Ä≤‚áí‚â§ (‚â§‚Ä≤-step ‚â§‚Ä≤-refl) ‚ü©
    suc (suc k) ‚â§‚ü® m‚â§m+n (suc (suc k)) m ‚ü©
    suc (suc k) + m ‚ñ°

‚Ñ§‚â§-steps {Int.-[1+ m ]} {Int.-[1+ n ]} (+ k)              (Int.-‚â§- n‚â§m) with suc m ‚â§? k | suc n ‚â§? k
‚Ñ§‚â§-steps {Int.-[1+ m ]} {Int.-[1+ n ]} (+ _)              (Int.-‚â§- n‚â§m) | yes (s‚â§s {_} {k} m‚â§k) | yes (s‚â§s n‚â§k)
  rewrite ‚äñ-‚â• {k} {m} m‚â§k | ‚äñ-‚â• {k} {n} n‚â§k = Int.+‚â§+ (n‚â§m‚áík-m‚â§k-n m n k n‚â§m)
‚Ñ§‚â§-steps {Int.-[1+ m ]} {Int.-[1+ n ]} (+ _)              (Int.-‚â§- n‚â§m) | yes (s‚â§s {_} {k} m‚â§k) | no ¬¨sn‚â§sk =
  ‚ä•-elim (¬¨sn‚â§sk (s‚â§s (start n ‚â§‚ü® n‚â§m ‚ü© m ‚â§‚ü® m‚â§k ‚ü© k ‚ñ°)))
‚Ñ§‚â§-steps {Int.-[1+ m ]} {Int.-[1+ n ]} (+ _)              (Int.-‚â§- n‚â§m) | no ¬¨sm‚â§k | yes (s‚â§s {_} {k} n‚â§k)
  rewrite ‚äñ-‚â• {k} {n} n‚â§k | ‚äñ-< {k} {m} (¬¨‚â§-> (Œª z ‚Üí ¬¨sm‚â§k (s‚â§s z))) | proj‚ÇÅ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sm‚â§k))) = Int.-‚â§+
‚Ñ§‚â§-steps {Int.-[1+ m ]} {Int.-[1+ n ]} (+ k)              (Int.-‚â§- n‚â§m) | no ¬¨sm‚â§k | no ¬¨sn‚â§k
  rewrite ‚äñ-< {k} {suc m} (¬¨‚â§-> ¬¨sm‚â§k) | ‚äñ-< {k} {suc n} (¬¨‚â§-> ¬¨sn‚â§k) |
    proj‚ÇÅ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sm‚â§k))) | proj‚ÇÅ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sn‚â§k))) = Int.-‚â§- (sx‚â§sy‚áíx‚â§y body)
    where
    body : suc (proj‚ÇÅ (-‚àÉ (¬¨‚â§-> ¬¨sn‚â§k))) ‚â§ suc (proj‚ÇÅ (-‚àÉ (¬¨‚â§-> ¬¨sm‚â§k)))
    body rewrite sym (proj‚ÇÇ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sm‚â§k)))) | sym (proj‚ÇÇ (proj‚ÇÇ (-‚àÉ (¬¨‚â§-> ¬¨sn‚â§k)))) =
      m‚â§n‚áím-k‚â§n-k k (s‚â§s n‚â§m)

‚Ñ§‚â§-steps {Int.-[1+ m ]} {Int.-[1+ n ]} (Int.-[1+ k ])     (Int.-‚â§- n‚â§m) = Int.-‚â§- (s‚â§s (‚â§-steps2 k n‚â§m))



lem1-1 : ‚àÄ {k} {x : Vec ùîπ (suc k)} -> sign ‚ü™ x ‚ü´ ‚â° œÉ x
lem1-1 {k} {false ‚à∑ xs} = refl
lem1-1 {k} {true ‚à∑ xs} = aux‚ÇÇ (- (2 ^ k) ‚Ñ§+ + Œ£ xs) aux
  where
  aux‚ÇÅ : - (2 ^ k) ‚Ñ§+ + ((2 ^ k) ‚à∏ 1) ‚â° - 1
  aux‚ÇÅ = begin
    - (2 ^ k) ‚Ñ§+ + ((2 ^ k) ‚à∏ 1) ‚â°‚ü® cong (_‚Ñ§+_ (- (2 ^ k))) (sym (‚äñ-‚â• (1‚â§2^k {k}))) ‚ü©
    - (2 ^ k) ‚Ñ§+ ((2 ^ k) ‚äñ 1) ‚â°‚ü® cong (_‚Ñ§+_ (- (2 ^ k))) (‚äñ-‚Ñ§- (2 ^ k) 1) ‚ü©
    - (2 ^ k) ‚Ñ§+ (+ (2 ^ k) ‚Ñ§+ - 1) ‚â°‚ü® sym (CR‚Ñ§.+-assoc (- (2 ^ k)) (+ (2 ^ k)) (- 1)) ‚ü©
    (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) ‚Ñ§+ - 1 ‚â°‚ü® CR‚Ñ§.+-comm (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) (- 1) ‚ü©
    - 1 ‚Ñ§+ (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (CR‚Ñ§.+-comm (- (2 ^ k)) (+ (2 ^ k))) ‚ü©
    - 1 ‚Ñ§+ (+ (2 ^ k) ‚Ñ§- + (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (sym (‚äñ-‚Ñ§- (2 ^ k) (2 ^ k))) ‚ü©
    - 1 ‚Ñ§+ ((2 ^ k) ‚äñ (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (IntegerProp.n‚äñn‚â°0 (2 ^ k)) ‚ü©
    - 1 ‚àé

  aux‚ÇÇ : ‚àÄ x -> x ‚Ñ§‚â§ - 1 -> sign x ‚â° Sign.-
  aux‚ÇÇ (+_ n) ()
  aux‚ÇÇ (Int.-[1+_] n) x‚â§‚Ñ§-1 = refl

  aux : ‚ü™ true ‚à∑ xs ‚ü´ ‚Ñ§‚â§ - 1
  aux rewrite sym aux‚ÇÅ | sym (lem1-1-1 {k}) = ‚Ñ§‚â§-steps (- (2 ^ k)) (Int.+‚â§+ (‚â§-Top {k}))
