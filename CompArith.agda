module CompArith where

-- open import Data.Empty
open import Data.Fin using (Fin; zero; suc; to‚Ñï)
open import Data.Product using (‚àÉ; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Nat
open ‚â§-Reasoning
  renaming (begin_ to start_; _‚àé to _‚ñ°; _‚â°‚ü®_‚ü©_ to _‚â°‚ü®_‚ü©'_)
open import Data.Nat.Properties
open import Data.Nat.Properties.Simple

open import Data.Integer as Int using (‚Ñ§; +_; sign; _‚äñ_) renaming (_*_ to _‚Ñ§*_; _+_ to _‚Ñ§+_; _-_ to _‚Ñ§-_; _‚â§_ to _‚Ñ§‚â§_)

open import Data.Vec
open import Data.Sign using (Sign)
open import Relation.Binary.PropositionalEquality as PropEq
  using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ)
open PropEq.‚â°-Reasoning
-- open import Relation.Nullary using (¬¨_; Dec; yes; no)

open import Algebra
import Data.Integer.Properties as IntegerProp
private
  module CR‚Ñ§ = CommutativeRing IntegerProp.commutativeRing

open import NatProps
open import IntProps

ùîπ = Fin 2

-- ‚à•_‚à• : ùîπ -> ‚Ñï
-- ‚à• zero ‚à• = 0
-- ‚à• suc zero ‚à• = 1
-- ‚à• suc (suc ()) ‚à•
-- ‚à• 1 ‚à• = 1

-- compl : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> Vec ùîπ (‚Ñï.suc k)
-- compl {zero} (x ‚à∑ []) = not x ‚à∑ []
-- compl {suc k} (x ‚à∑ xs) = not x ‚à∑ compl xs

Œ£ : ‚àÄ {k} -> Vec ùîπ k -> ‚Ñï
Œ£ {zero} [] = 0
Œ£ {suc i} (zero ‚à∑ xs) = Œ£ xs
Œ£ {suc i} (suc zero ‚à∑ xs) = (2 ^ i) + Œ£ xs
Œ£ {suc i} (suc (suc ()) ‚à∑ xs)


Œ£spec : ‚àÄ {k} -> Vec ùîπ k -> ‚Ñï
Œ£spec {0} [] = 0
Œ£spec {suc i} (x ‚à∑ xs) = to‚Ñï x * 2 ^ i + Œ£ xs


-- Œ£ is a better def. to work with ... similar to the def. of ‚ü™_‚ü´
Œ£spec‚â°Œ£ : ‚àÄ {k} (x : Vec ùîπ k) -> Œ£spec x ‚â° Œ£ x
Œ£spec‚â°Œ£ [] = refl
Œ£spec‚â°Œ£ (zero ‚à∑ xs) = refl
Œ£spec‚â°Œ£ {suc i} (suc zero ‚à∑ xs) rewrite 1*m‚â°m {2 ^ i} = refl
Œ£spec‚â°Œ£ {suc i} (suc (suc ()) ‚à∑ xs)


‚ü¶_‚üß : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> ‚Ñ§
‚ü¶ xs ‚üß = + Œ£ xs


‚ü™_‚ü´ : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> ‚Ñ§
‚ü™_‚ü´ {k} (zero ‚à∑ xs) = + Œ£ xs
‚ü™_‚ü´ {k} (suc zero ‚à∑ xs) = - (2 ^ k) ‚Ñ§+ (+ Œ£ xs)
‚ü™_‚ü´ {k} (suc (suc ()) ‚à∑ xs)


œÉ : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> Sign
œÉ (zero ‚à∑ xs) = Sign.+
œÉ (suc zero ‚à∑ xs) = Sign.-
œÉ (suc (suc ()) ‚à∑ xs)


Top : ‚àÄ {k : ‚Ñï} -> Vec ùîπ k
Top {zero} = []
Top {suc k} = suc zero ‚à∑ Top


‚â§-Top : ‚àÄ {k} {x : Vec ùîπ k} -> Œ£ x ‚â§ Œ£ (Top {k})
‚â§-Top {zero} {[]} = z‚â§n
‚â§-Top {suc k} {zero ‚à∑ xs} = ‚â§-steps {Œ£ xs} {Œ£ {k} Top} (2 ^ k) (‚â§-Top {k})
‚â§-Top {suc k} {suc zero ‚à∑ xs} = ‚â§-steps2 (2 ^ k) (‚â§-Top {k})
‚â§-Top {suc k} {suc (suc ()) ‚à∑ xs}


lem1-1-1 : ‚àÄ {k} -> Œ£ (Top {k}) ‚â° (2 ^ k) ‚à∏ 1 -- equiv to ‚ü¶ Top {k} ‚üß ‚â° (2 ^ k) ‚à∏ 1
lem1-1-1 {zero} = refl
lem1-1-1 {suc k} rewrite lem1-1-1 {k} | +-right-identity (2 ^ k) = begin
  (2 ^ k) + ((2 ^ k) ‚à∏ 1) ‚â°‚ü® sym (+-‚à∏-assoc (2 ^ k) {2 ^ k} {1} (1‚â§2^k {k})) ‚ü© refl


lem1-1 : ‚àÄ {k} {x : Vec ùîπ (suc k)} -> sign ‚ü™ x ‚ü´ ‚â° œÉ x
lem1-1 {k} {zero ‚à∑ xs} = refl
lem1-1 {k} {suc zero ‚à∑ xs} = aux‚ÇÇ (- (2 ^ k) ‚Ñ§+ + Œ£ xs) aux
  where
  aux‚ÇÅ : - (2 ^ k) ‚Ñ§+ + ((2 ^ k) ‚à∏ 1) ‚â° - 1
  aux‚ÇÅ = begin
    - (2 ^ k) ‚Ñ§+ + ((2 ^ k) ‚à∏ 1) ‚â°‚ü® cong (_‚Ñ§+_ (- (2 ^ k))) (sym (‚äñ-‚â• (1‚â§2^k {k}))) ‚ü©
    - (2 ^ k) ‚Ñ§+ ((2 ^ k) ‚äñ 1) ‚â°‚ü® cong (_‚Ñ§+_ (- (2 ^ k))) (‚äñ-‚Ñ§- (2 ^ k) 1) ‚ü©
    - (2 ^ k) ‚Ñ§+ (+ (2 ^ k) ‚Ñ§+ - 1) ‚â°‚ü® sym (CR‚Ñ§.+-assoc (- (2 ^ k)) (+ (2 ^ k)) (- 1)) ‚ü©
    (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) ‚Ñ§+ - 1 ‚â°‚ü® CR‚Ñ§.+-comm (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) (- 1) ‚ü©
    - 1 ‚Ñ§+ (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (CR‚Ñ§.+-comm (- (2 ^ k)) (+ (2 ^ k))) ‚ü©
    - 1 ‚Ñ§+ (+ (2 ^ k) ‚Ñ§- + (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (sym (‚äñ-‚Ñ§- (2 ^ k) (2 ^ k))) ‚ü©
    - 1 ‚Ñ§+ ((2 ^ k) ‚äñ (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (IntegerProp.n‚äñn‚â°0 (2 ^ k)) ‚ü©
    - 1 ‚àé

  aux‚ÇÇ : ‚àÄ x -> x ‚Ñ§‚â§ - 1 -> sign x ‚â° Sign.-
  aux‚ÇÇ (+_ n) ()
  aux‚ÇÇ (Int.-[1+_] n) x‚â§‚Ñ§-1 = refl

  aux : ‚ü™ suc zero ‚à∑ xs ‚ü´ ‚Ñ§‚â§ - 1
  aux rewrite sym aux‚ÇÅ | sym (lem1-1-1 {k}) = ‚Ñ§‚â§-steps (- (2 ^ k)) (Int.+‚â§+ (‚â§-Top {k}))

lem1-1 {k} {suc (suc ()) ‚à∑ xs}


_modùîπ : ‚Ñï -> ùîπ
0 modùîπ = zero
1 modùîπ = suc zero
suc (suc a) modùîπ = a modùîπ


_divùîπ : ‚Ñï -> ùîπ
0 divùîπ = zero
1 divùîπ = zero
suc (suc a) divùîπ = suc zero


divùîπspec : ‚àÄ {a b c : ùîπ} -> to‚Ñï ( ( (to‚Ñï a) + (to‚Ñï b) + (to‚Ñï c) ) divùîπ ) ‚â° ‚åä (to‚Ñï a) + (to‚Ñï b) + (to‚Ñï c) /2‚åã
divùîπspec {zero} {zero} {zero} = refl
divùîπspec {zero} {zero} {suc zero} = refl
divùîπspec {zero} {zero} {suc (suc ())}
divùîπspec {zero} {suc zero} {zero} = refl
divùîπspec {zero} {suc zero} {suc zero} = refl
divùîπspec {zero} {suc zero} {suc (suc ())}
divùîπspec {zero} {suc (suc ())}
divùîπspec {suc zero} {zero} {zero} = refl
divùîπspec {suc zero} {zero} {suc zero} = refl
divùîπspec {suc zero} {zero} {suc (suc ())}
divùîπspec {suc zero} {suc zero} {zero} = refl
divùîπspec {suc zero} {suc zero} {suc zero} = refl
divùîπspec {suc zero} {suc zero} {suc (suc ())}
divùîπspec {suc zero} {suc (suc ())}
divùîπspec {suc (suc ())}


-- addition

_‚äï_ : ‚àÄ {k : ‚Ñï} -> Vec ùîπ k -> Vec ùîπ k -> (Vec ùîπ k √ó ùîπ)
[] ‚äï [] = [] , zero
(a ‚à∑ xa) ‚äï (b ‚à∑ xb) =
  ( ( (to‚Ñï a) + (to‚Ñï b) + (to‚Ñï c) ) modùîπ ) ‚à∑ xa‚äïxb , ( (to‚Ñï a) + (to‚Ñï b) + (to‚Ñï c) ) divùîπ
  where
  xa‚äïxb = proj‚ÇÅ (xa ‚äï xb)
  c = proj‚ÇÇ (xa ‚äï xb)


_‚Üê!_ : ‚àÄ {a} {A : Set a} m {n} -> Vec A (m + suc n) -> A
0 ‚Üê! (x ‚à∑ _) = x
(suc m) ‚Üê! (_ ‚à∑ xs) = m ‚Üê! xs

si+k‚â°i+sk : ‚àÄ {i k} -> suc i + k ‚â° i + suc k
si+k‚â°i+sk {zero} {k} = refl
si+k‚â°i+sk {suc i} = cong suc (si+k‚â°i+sk {i})

‚àÅ : ‚àÄ {k : ‚Ñï} (i : ‚Ñï) -> Vec ùîπ (i + suc k) -> Vec ùîπ (i + suc k) -> ùîπ
‚àÅ 0 a b = zero
‚àÅ {k} (suc i) a b rewrite si+k‚â°i+sk {i} {suc k} = ( (to‚Ñï (i ‚Üê! a) ) + (to‚Ñï (i ‚Üê! b) ) + (to‚Ñï (‚àÅ i a b) ) ) divùîπ


r : ‚àÄ {k : ‚Ñï} (i : ‚Ñï) -> Vec ùîπ (i + suc k) -> Vec ùîπ (i + suc k) -> ùîπ
r i a b = ( (to‚Ñï (i ‚Üê! a) ) + (to‚Ñï (i ‚Üê! b) ) + (to‚Ñï (‚àÅ i a b) ) ) modùîπ



--
-- -- keep : ‚àÄ {a} {A : Set a} {m} n ‚Üí Vec A (m + n) ‚Üí Vec A n
-- -- keep {m = m} n = drop m {n = n}
-- --
-- drop-0 : ‚àÄ {a} {A : Set a} {k : ‚Ñï} {v : Vec A (k + 0)} -> drop k v ‚â° []
-- drop-0 {k = k} {v} with splitAt k v
-- drop-0 {v = .(ys ++ [])} | ys , [] , refl = refl
--
-- lem2-1-1 : ‚àÄ {k : ‚Ñï} (i : ‚Ñï) (a b : Vec ùîπ (suc k + i)) ->
--   drop (suc k) (proj‚ÇÅ (a ‚äï b)) ‚â° proj‚ÇÅ ((drop (suc k) a) ‚äï (drop (suc k) b))
-- lem2-1-1 {k} 0 a b rewrite
--   drop-0 {k = suc k} {proj‚ÇÅ (a ‚äï b)} |
--   drop-0 {k = suc k} {a} |
--   drop-0 {k = suc k} {b} = refl
-- lem2-1-1 {k} (suc i) a b = {!   !}

-- lem2-1-1 : ‚àÄ {k : ‚Ñï} (i : ‚Ñï) (a b : Vec ùîπ (suc k + i)) ->
--   keep {m = suc k} i (proj‚ÇÅ (a ‚äï b)) ‚â° proj‚ÇÅ ((keep {m = suc k} i a) ‚äï (keep {m = suc k} i b))
-- lem2-1-1 {k} 0 a b rewrite
--   keep-0 {k = suc k} {proj‚ÇÅ (a ‚äï b)} |
--   keep-0 {k = suc k} {a} |
--   keep-0 {k = suc k} {b} = refl
-- lem2-1-1 {k} (suc i) a b = {! a  !}
  -- where
  -- ih : keep {m = suc (suc )} i (proj‚ÇÅ (a ‚äï b)) ‚â° proj‚ÇÅ (keep {m = suc (suc k)} i a ‚äï keep  {m = suc (suc k)} i b)
  -- ih = lem2-1-1 i ? ?

--
-- lem2-1 : ‚àÄ {k i : ‚Ñï} (a b : Vec ùîπ (i + suc k)) -> proj‚ÇÅ ((false ‚à∑ (drop i a)) ‚äï (false ‚à∑ (drop i a))) ‚â° false ‚à∑ drop i (proj‚ÇÅ (a ‚äï b)) -- (proj‚ÇÇ (a ‚äï a)) ‚à∑ (proj‚ÇÅ (a ‚äï a))
-- lem2-1 = {!   !}
