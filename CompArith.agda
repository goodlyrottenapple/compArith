module CompArith where

open import Data.Bool
open import Data.Nat
open ‚â§-Reasoning
  renaming (begin_ to start_; _‚àé to _‚ñ°; _‚â°‚ü®_‚ü©_ to _‚â°‚ü®_‚ü©'_)
open import Data.Nat.Properties
open import Data.Nat.Properties.Simple

open import Data.Integer as Int using (‚Ñ§; +_; sign; _‚äñ_) renaming (_*_ to _‚Ñ§*_; _+_ to _‚Ñ§+_; _-_ to _‚Ñ§-_; _‚â§_ to _‚Ñ§‚â§_)

open import Algebra
import Data.Integer.Properties as IntegerProp
private
  module CR = CommutativeRing IntegerProp.commutativeRing


-- open Int.‚â§-Reasoning
--   renaming (begin_ to start_; _‚àé to _‚ñ°; _‚â°‚ü®_‚ü©_ to _‚â°‚ü®_‚ü©'_)

open import Data.Vec
open import Data.Sign using (Sign)
open import Relation.Binary.PropositionalEquality as PropEq
  using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ)
open PropEq.‚â°-Reasoning

-_ : ‚Ñï -> ‚Ñ§
- x = Int.- (+ x)

ùîπ = Bool

_^_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m ^ zero = 1
m ^ suc x = m * (m ^ x)

-- ‚à•_‚à• : ùîπ -> ‚Ñ§
-- ‚à• false ‚à• = + 0
-- ‚à• true ‚à• = + 1

compl : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> Vec ùîπ (‚Ñï.suc k)
compl {zero} (x ‚à∑ []) = not x ‚à∑ []
compl {suc k} (x ‚à∑ xs) = not x ‚à∑ compl xs

Œ£ : ‚àÄ {k} -> Vec ùîπ k -> ‚Ñï
Œ£ {zero} [] = 0
Œ£ {suc i} (false ‚à∑ xs) = Œ£ xs
Œ£ {suc i} (true ‚à∑ xs) = (2 ^ i) + Œ£ xs

‚ü¶_‚üß : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> ‚Ñ§
‚ü¶ xs ‚üß = + Œ£ xs

‚ü™_‚ü´ : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> ‚Ñ§
‚ü™_‚ü´ {k} (false ‚à∑ xs) = + Œ£ xs
‚ü™_‚ü´ {k} (true ‚à∑ xs) = - (2 ^ k) ‚Ñ§+ (+ Œ£ xs)

œÉ : ‚àÄ {k} -> Vec ùîπ (‚Ñï.suc k) -> Sign
œÉ (false ‚à∑ xs) = Sign.+
œÉ (true ‚à∑ xs) = Sign.-

Top : ‚àÄ {k} -> Vec ùîπ k
Top {zero} = []
Top {suc k} = true ‚à∑ Top

‚â§-steps2 : ‚àÄ {m n} k ‚Üí m ‚â§ n ‚Üí k + m ‚â§ k + n
‚â§-steps2 zero m‚â§n = m‚â§n
‚â§-steps2 (suc k) m‚â§n = s‚â§s (‚â§-steps2 k m‚â§n)

‚â§-Top : ‚àÄ {k} {x : Vec ùîπ k} -> Œ£ x ‚â§ Œ£ (Top {k})
‚â§-Top {zero} {[]} = z‚â§n
‚â§-Top {suc k} {false ‚à∑ xs} = ‚â§-steps {Œ£ xs} {Œ£ {k} Top} (2 ^ k) (‚â§-Top {k})
‚â§-Top {suc k} {true ‚à∑ xs} = ‚â§-steps2 (2 ^ k) (‚â§-Top {k})

+-zer-id : ‚àÄ n -> n + 0 ‚â° n
+-zer-id zero = refl
+-zer-id (suc n) = cong suc (+-zer-id n)

*-1-id : ‚àÄ n -> 1 * n ‚â° n
*-1-id zero = refl
*-1-id (suc n) = cong suc (*-1-id n)

‚â§-*-steps : ‚àÄ {m n} k ‚Üí 1 ‚â§ k -> m ‚â§ n ‚Üí m ‚â§ k * n
‚â§-*-steps zero () _
‚â§-*-steps {n = n} (suc zero) 1‚â§k m‚â§n rewrite *-1-id n = m‚â§n
‚â§-*-steps {n = n} (suc (suc k)) 1‚â§k m‚â§n = ‚â§-steps n (‚â§-*-steps (suc k) (s‚â§s z‚â§n) m‚â§n)

1‚â§2^k : ‚àÄ {k} -> 1 ‚â§ (2 ^ k)
1‚â§2^k {zero} = s‚â§s z‚â§n
1‚â§2^k {suc k} = start
  1 ‚â§‚ü® 1‚â§2^k {k} ‚ü©
  2 ^ k ‚â§‚ü® ‚â§-*-steps {n = 2 ^ k} 2 (s‚â§s z‚â§n) (‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl) ‚ü©
  2 ^ (suc k) ‚ñ°

lem1-1-1 : ‚àÄ {k} -> Œ£ (Top {k}) ‚â° (2 ^ k) ‚à∏ 1 -- equiv to ‚ü¶ Top {k} ‚üß ‚â° (2 ^ k) ‚à∏ 1
lem1-1-1 {zero} = refl
lem1-1-1 {suc k} rewrite lem1-1-1 {k} | +-right-identity (2 ^ k) = begin
  (2 ^ k) + ((2 ^ k) ‚à∏ 1) ‚â°‚ü® sym (+-‚à∏-assoc (2 ^ k) {2 ^ k} {1} (1‚â§2^k {k})) ‚ü© refl


‚äñ-‚Ñ§- : ‚àÄ m n ‚Üí m ‚äñ n ‚â° + m ‚Ñ§- + n
‚äñ-‚Ñ§- zero zero = refl
‚äñ-‚Ñ§- zero (suc n) = refl
‚äñ-‚Ñ§- (suc m) zero rewrite +-zer-id m | +-zer-id m = refl
‚äñ-‚Ñ§- (suc m) (suc n) = refl

‚äñ-‚â• : ‚àÄ {m n} ‚Üí m ‚â• n ‚Üí m ‚äñ n ‚â° + (m ‚à∏ n)
‚äñ-‚â• z‚â§n       = refl
‚äñ-‚â• (s‚â§s n‚â§m) = ‚äñ-‚â• n‚â§m

-- +-swap : ‚àÄ k n -> (suc k) + n ‚â° (suc n) + k
-- +-swap zero n rewrite +-zer-id (suc n) = refl
-- +-swap (suc k) n = cong suc (+-comm (suc k) n)

-- ‚â§'-steps : ‚àÄ {m n} k ‚Üí m ‚Ñ§‚â§ n ‚Üí k ‚Ñ§+ m ‚Ñ§‚â§ k ‚Ñ§+ n
-- ‚â§'-steps {+_ m} {+_ n} (+_ k) m‚â§n = Int.+‚â§+ (‚â§-steps2 k (Int.drop‚Äø+‚â§+ m‚â§n))
-- ‚â§'-steps {+_ m} {Int.-[1+_] n} (+_ k) ()
-- ‚â§'-steps {Int.-[1+_] m} {+_ n} (+_ zero) Int.-‚â§+ = Int.-‚â§+
-- ‚â§'-steps {Int.-[1+_] zero} {+_ n} (+_ (suc k)) Int.-‚â§+ = Int.+‚â§+ aux
--   where
--   aux : k ‚â§ suc k + n
--   aux rewrite +-swap k n = ‚â§-steps (suc n) (‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl)
-- ‚â§'-steps {Int.-[1+_] (suc m)} {+_ n} (+_ (suc k)) Int.-‚â§+ = {!   !}
-- ‚â§'-steps {Int.-[1+_] m} {Int.-[1+_] n} (+_ k) (Int.-‚â§- n‚â§m) = {!   !}
-- ‚â§'-steps (Int.-[1+_] k) m‚â§n = {!   !}

‚Ñ§‚â§-steps : ‚àÄ {m n} k ‚Üí m ‚Ñ§‚â§ n ‚Üí k ‚Ñ§+ m ‚Ñ§‚â§ k ‚Ñ§+ n
‚Ñ§‚â§-steps {+ m} {+ n} (+ k)          (Int.+‚â§+ m‚â§n) = Int.+‚â§+ (‚â§-steps2 k m‚â§n)
‚Ñ§‚â§-steps {+ m} {+ n} (Int.-[1+ k ]) (Int.+‚â§+ m‚â§n) = {!   !}

‚Ñ§‚â§-steps {+ m}          {Int.-[1+ n ]} k ()
‚Ñ§‚â§-steps {Int.-[1+ m ]} {+ n}          k Int.-‚â§+ = {!   !}
‚Ñ§‚â§-steps {Int.-[1+ m ]} {Int.-[1+ n ]} k (Int.-‚â§- n‚â§m) = {!   !}


lem1-1 : ‚àÄ {k} {x : Vec ùîπ (suc k)} -> sign ‚ü™ x ‚ü´ ‚â° œÉ x
lem1-1 {k} {false ‚à∑ xs} = refl
lem1-1 {k} {true ‚à∑ xs} = aux‚ÇÇ (- (2 ^ k) ‚Ñ§+ + Œ£ xs) aux
  where
  aux‚ÇÅ : - (2 ^ k) ‚Ñ§+ + ((2 ^ k) ‚à∏ 1) ‚â° - 1
  aux‚ÇÅ = begin
    - (2 ^ k) ‚Ñ§+ + ((2 ^ k) ‚à∏ 1) ‚â°‚ü® cong (_‚Ñ§+_ (- (2 ^ k))) (sym (‚äñ-‚â• (1‚â§2^k {k}))) ‚ü©
    - (2 ^ k) ‚Ñ§+ ((2 ^ k) ‚äñ 1) ‚â°‚ü® cong (_‚Ñ§+_ (- (2 ^ k))) (‚äñ-‚Ñ§- (2 ^ k) 1) ‚ü©
    - (2 ^ k) ‚Ñ§+ (+ (2 ^ k) ‚Ñ§+ - 1) ‚â°‚ü® sym (CR.+-assoc (- (2 ^ k)) (+ (2 ^ k)) (- 1)) ‚ü©
    (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) ‚Ñ§+ - 1 ‚â°‚ü® CR.+-comm (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) (- 1) ‚ü©
    - 1 ‚Ñ§+ (- (2 ^ k) ‚Ñ§+ + (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (CR.+-comm (- (2 ^ k)) (+ (2 ^ k))) ‚ü©
    - 1 ‚Ñ§+ (+ (2 ^ k) ‚Ñ§- + (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (sym (‚äñ-‚Ñ§- (2 ^ k) (2 ^ k))) ‚ü©
    - 1 ‚Ñ§+ ((2 ^ k) ‚äñ (2 ^ k)) ‚â°‚ü® cong (_‚Ñ§+_ (- 1)) (IntegerProp.n‚äñn‚â°0 (2 ^ k)) ‚ü©
    - 1 ‚àé

  aux‚ÇÇ : ‚àÄ x -> x ‚Ñ§‚â§ - 1 -> sign x ‚â° Sign.-
  aux‚ÇÇ (+_ n) ()
  aux‚ÇÇ (Int.-[1+_] n) x‚â§‚Ñ§-1 = refl

  aux : ‚ü™ true ‚à∑ xs ‚ü´ ‚Ñ§‚â§ - 1
  aux rewrite sym aux‚ÇÅ | sym (lem1-1-1 {k}) = ‚Ñ§‚â§-steps (- (2 ^ k)) (Int.+‚â§+ (‚â§-Top {k}))
